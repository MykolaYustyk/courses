'''
Банкомат 2.0
    - усі дані зберігаються тільки в sqlite3 базі даних у відповідних таблицях. Більше ніяких файлів. Якщо в попередньому завданні ви добре продумали структуру програми то у вас не виникне проблем швидко адаптувати її до нових вимог.
    - на старті додати можливість залогінитися або створити нового користувача (при створенні нового користувача, перевіряється відповідність логіну і паролю мінімальним вимогам. Для перевірки створіть окремі функції)
    - в таблиці з користувачами також має бути створений унікальний користувач-інкасатор, який матиме розширені можливості (домовимось, що логін/пароль будуть admin/admin щоб нам було простіше перевіряти)
    - банкомат має власний баланс
    - кількість купюр в банкоматі обмежена (тобто має зберігатися номінал та кількість). Номінали купюр - 10, 20, 50, 100, 200, 500, 1000
    - змінювати вручну кількість купюр або подивитися їх залишок в банкоматі може лише інкасатор
    - користувач через банкомат може покласти на рахунок лише суму кратну мінімальному номіналу що підтримує банкомат. В іншому випадку - повернути "здачу" (наприклад при поклажі 1005 --> повернути 5). Але це не має впливати на баланс/кількість купюр банкомату, лише збільшується баланс користувача (моделюємо наявність двох незалежних касет в банкоматі - одна на прийом, інша на видачу)
    - зняти можна лише в межах власного балансу, але не більше ніж є всього в банкоматі.
    - при неможливості виконання якоїсь операції - вивести повідомлення з причиною (невірний логін/пароль, недостатньо коштів на рахунку, неможливо видати суму наявними купюрами тощо.)
    - файл бази даних з усіма створеними таблицями і даними також додайте в репозиторій, що б ми могли його використати
'''

import sqlite3
import datetime

menu_entrance = {1: 'Ввійти', 2: 'Зареєструватись'}
menu_admin = {1: 'Переглянути баланс ', 2: 'Додати кількість кюпюр', 3: 'Забрати кюпюри', 4: 'Вихід' }
menu_user = {1: 'Переглянути баланс', 2: 'Поповнити баланс ', 3: 'Зняти кошти', 4: 'Вихід'}
coins = {'10': 0, '20': 0, '50': 0, '100': 0, '200': 0, '500': 0, '1000': 0}


def my_decorator(function):
    def wrapper(*args, **kwargs):
        print('-' * 25)
        result = function(*args, **kwargs)
        print('-' * 25)
        return result
    return wrapper


@my_decorator
def output_menu(menu):
    for key, val in menu.items():
        print(f'{key}. {val}')
            
        
def get_choice(menu):
    while True:
        choice = int(input('Ваш вибір: '))
        if choice in range(1, len(menu) + 1):
            break
        else:
            print(f'Вибір повинен бути в межах від 1 до {len(menu)}')
    return choice
        
def start():
    output_menu(menu_entrance)
    enter_choice = get_choice(menu_entrance)
    if enter_choice == 1:
        while True:
            output_menu(menu_user)
            user_choice = get_choice(menu_user)
            if user_choice == 1:
                show_balance(current_user) 
            elif user_choice == 2:
                add_balance(current_user)
            elif user_choice == 3:
                get_money(current_user)
            elif user_choice == 4:
                break
    elif enter_choice == 2:
        while True:
            output_menu(menu_admin)
            admin_choice = get_choice(menu_admin)
            if admin_choice == 1:
                show_bank_balance()
            elif admin_choice == 2:
                add_coins()
            elif admin_choice == 3:
                get_coins()
            elif admin_choice == 4:
                break
             
            
            
if __name__ == "__main__":
    start()